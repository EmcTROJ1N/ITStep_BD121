//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdministratorClientApp.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Administrator", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    [System.SerializableAttribute()]
    public partial class Administrator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.ResourcesNetworkStatus ClientStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConnectorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.ResourcesSearchingStatus FindStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.ResourcesNetworkStatus _clientStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int _connectorIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.ResourcesNetworkStatus ClientStatus {
            get {
                return this.ClientStatusField;
            }
            set {
                if ((this.ClientStatusField.Equals(value) != true)) {
                    this.ClientStatusField = value;
                    this.RaisePropertyChanged("ClientStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConnectorID {
            get {
                return this.ConnectorIDField;
            }
            set {
                if ((this.ConnectorIDField.Equals(value) != true)) {
                    this.ConnectorIDField = value;
                    this.RaisePropertyChanged("ConnectorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.ResourcesSearchingStatus FindStatus {
            get {
                return this.FindStatusField;
            }
            set {
                if ((this.FindStatusField.Equals(value) != true)) {
                    this.FindStatusField = value;
                    this.RaisePropertyChanged("FindStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.ResourcesNetworkStatus _clientStatus {
            get {
                return this._clientStatusField;
            }
            set {
                if ((this._clientStatusField.Equals(value) != true)) {
                    this._clientStatusField = value;
                    this.RaisePropertyChanged("_clientStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int _connectorID {
            get {
                return this._connectorIDField;
            }
            set {
                if ((this._connectorIDField.Equals(value) != true)) {
                    this._connectorIDField = value;
                    this.RaisePropertyChanged("_connectorID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Resources.NetworkStatus", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public enum ResourcesNetworkStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Resources.SearchingStatus", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public enum ResourcesSearchingStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingForStart = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Searching = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paused = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.ResourcesNetworkStatus ClientStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConnectorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.ResourcesNetworkStatus _clientStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.ResourcesNetworkStatus ClientStatus {
            get {
                return this.ClientStatusField;
            }
            set {
                if ((this.ClientStatusField.Equals(value) != true)) {
                    this.ClientStatusField = value;
                    this.RaisePropertyChanged("ClientStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConnectorID {
            get {
                return this.ConnectorIDField;
            }
            set {
                if ((this.ConnectorIDField.Equals(value) != true)) {
                    this.ConnectorIDField = value;
                    this.RaisePropertyChanged("ConnectorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.ResourcesNetworkStatus _clientStatus {
            get {
                return this._clientStatusField;
            }
            set {
                if ((this._clientStatusField.Equals(value) != true)) {
                    this._clientStatusField = value;
                    this.RaisePropertyChanged("_clientStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessContainer", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    [System.SerializableAttribute()]
    public partial class ProcessContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BasePriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RespondingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WindowTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long _PagedMemoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BasePriority {
            get {
                return this.BasePriorityField;
            }
            set {
                if ((this.BasePriorityField.Equals(value) != true)) {
                    this.BasePriorityField = value;
                    this.RaisePropertyChanged("BasePriority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Responding {
            get {
                return this.RespondingField;
            }
            set {
                if ((this.RespondingField.Equals(value) != true)) {
                    this.RespondingField = value;
                    this.RaisePropertyChanged("Responding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WindowTitle {
            get {
                return this.WindowTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.WindowTitleField, value) != true)) {
                    this.WindowTitleField = value;
                    this.RaisePropertyChanged("WindowTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long _PagedMemory {
            get {
                return this._PagedMemoryField;
            }
            set {
                if ((this._PagedMemoryField.Equals(value) != true)) {
                    this._PagedMemoryField = value;
                    this.RaisePropertyChanged("_PagedMemory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderContainer", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    [System.SerializableAttribute()]
    public partial class FolderContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.FileContainer[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((this.CreationTimeField.Equals(value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.FileContainer[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileContainer", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    [System.SerializableAttribute()]
    public partial class FileContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastAccessTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastWriteTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly {
            get {
                return this.IsReadOnlyField;
            }
            set {
                if ((this.IsReadOnlyField.Equals(value) != true)) {
                    this.IsReadOnlyField = value;
                    this.RaisePropertyChanged("IsReadOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastAccessTime {
            get {
                return this.LastAccessTimeField;
            }
            set {
                if ((this.LastAccessTimeField.Equals(value) != true)) {
                    this.LastAccessTimeField = value;
                    this.RaisePropertyChanged("LastAccessTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastWriteTime {
            get {
                return this.LastWriteTimeField;
            }
            set {
                if ((this.LastWriteTimeField.Equals(value) != true)) {
                    this.LastWriteTimeField = value;
                    this.RaisePropertyChanged("LastWriteTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegistryKeyContainer", Namespace="http://schemas.datacontract.org/2004/07/ServerService", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class RegistryKeyContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SubKeysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.ValueContainer[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SubKeys {
            get {
                return this.SubKeysField;
            }
            set {
                if ((object.ReferenceEquals(this.SubKeysField, value) != true)) {
                    this.SubKeysField = value;
                    this.RaisePropertyChanged("SubKeys");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.ValueContainer[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueContainer", Namespace="http://schemas.datacontract.org/2004/07/ServerService", IsReference=true)]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.Administrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.ResourcesNetworkStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.ResourcesSearchingStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.User[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.ProcessContainer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.ProcessContainer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.FolderContainer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.FolderContainer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.FileContainer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.FileContainer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.RegistryKeyContainer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.RegistryKeyContainer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdministratorClientApp.ServiceReference.ValueContainer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Win32.RegistryValueKind))]
    public partial class ValueContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministratorClientApp.ServiceReference.RegistryKeyContainer ParentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Microsoft.Win32.RegistryValueKind TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministratorClientApp.ServiceReference.RegistryKeyContainer Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentField, value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Microsoft.Win32.RegistryValueKind Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAdminService", CallbackContract=typeof(AdministratorClientApp.ServiceReference.IAdminServiceCallback))]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RemoveAdmin", ReplyAction="http://tempuri.org/IAdminService/RemoveAdminResponse")]
        void RemoveAdmin(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RemoveAdmin", ReplyAction="http://tempuri.org/IAdminService/RemoveAdminResponse")]
        System.Threading.Tasks.Task RemoveAdminAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LogInAdmin", ReplyAction="http://tempuri.org/IAdminService/LogInAdminResponse")]
        AdministratorClientApp.ServiceReference.Administrator LogInAdmin(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LogInAdmin", ReplyAction="http://tempuri.org/IAdminService/LogInAdminResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.Administrator> LogInAdminAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RegisterAdmin", ReplyAction="http://tempuri.org/IAdminService/RegisterAdminResponse")]
        AdministratorClientApp.ServiceReference.Administrator RegisterAdmin(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RegisterAdmin", ReplyAction="http://tempuri.org/IAdminService/RegisterAdminResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.Administrator> RegisterAdminAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LogOutAdmin", ReplyAction="http://tempuri.org/IAdminService/LogOutAdminResponse")]
        void LogOutAdmin(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LogOutAdmin", ReplyAction="http://tempuri.org/IAdminService/LogOutAdminResponse")]
        System.Threading.Tasks.Task LogOutAdminAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUsers", ReplyAction="http://tempuri.org/IAdminService/GetUsersResponse")]
        AdministratorClientApp.ServiceReference.User[] GetUsers(AdministratorClientApp.ServiceReference.Administrator admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUsers", ReplyAction="http://tempuri.org/IAdminService/GetUsersResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.User[]> GetUsersAsync(AdministratorClientApp.ServiceReference.Administrator admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SendMessageBox", ReplyAction="http://tempuri.org/IAdminService/SendMessageBoxResponse")]
        void SendMessageBox(string login, string password, string targetLogin, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SendMessageBox", ReplyAction="http://tempuri.org/IAdminService/SendMessageBoxResponse")]
        System.Threading.Tasks.Task SendMessageBoxAsync(string login, string password, string targetLogin, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetProcesses", ReplyAction="http://tempuri.org/IAdminService/GetProcessesResponse")]
        AdministratorClientApp.ServiceReference.ProcessContainer[] GetProcesses(string login, string password, string targetLogin, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetProcesses", ReplyAction="http://tempuri.org/IAdminService/GetProcessesResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.ProcessContainer[]> GetProcessesAsync(string login, string password, string targetLogin, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/TerminateProcesses", ReplyAction="http://tempuri.org/IAdminService/TerminateProcessesResponse")]
        void TerminateProcesses(string login, string password, string targetLogin, int[] pids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/TerminateProcesses", ReplyAction="http://tempuri.org/IAdminService/TerminateProcessesResponse")]
        System.Threading.Tasks.Task TerminateProcessesAsync(string login, string password, string targetLogin, int[] pids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SuspendProcesses", ReplyAction="http://tempuri.org/IAdminService/SuspendProcessesResponse")]
        void SuspendProcesses(string login, string password, string targetLogin, int[] pids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SuspendProcesses", ReplyAction="http://tempuri.org/IAdminService/SuspendProcessesResponse")]
        System.Threading.Tasks.Task SuspendProcessesAsync(string login, string password, string targetLogin, int[] pids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ResumeProcesses", ReplyAction="http://tempuri.org/IAdminService/ResumeProcessesResponse")]
        void ResumeProcesses(string login, string password, string targetLogin, int[] pids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ResumeProcesses", ReplyAction="http://tempuri.org/IAdminService/ResumeProcessesResponse")]
        System.Threading.Tasks.Task ResumeProcessesAsync(string login, string password, string targetLogin, int[] pids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/BeginSearchFiles", ReplyAction="http://tempuri.org/IAdminService/BeginSearchFilesResponse")]
        void BeginSearchFiles(string login, string password, string targetLogin, string path, string mask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/BeginSearchFiles", ReplyAction="http://tempuri.org/IAdminService/BeginSearchFilesResponse")]
        System.Threading.Tasks.Task BeginSearchFilesAsync(string login, string password, string targetLogin, string path, string mask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetSearchingStatus", ReplyAction="http://tempuri.org/IAdminService/GetSearchingStatusResponse")]
        AdministratorClientApp.ServiceReference.ResourcesSearchingStatus GetSearchingStatus(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetSearchingStatus", ReplyAction="http://tempuri.org/IAdminService/GetSearchingStatusResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.ResourcesSearchingStatus> GetSearchingStatusAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/PauseSearch", ReplyAction="http://tempuri.org/IAdminService/PauseSearchResponse")]
        void PauseSearch(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/PauseSearch", ReplyAction="http://tempuri.org/IAdminService/PauseSearchResponse")]
        System.Threading.Tasks.Task PauseSearchAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ResumeSearch", ReplyAction="http://tempuri.org/IAdminService/ResumeSearchResponse")]
        void ResumeSearch(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ResumeSearch", ReplyAction="http://tempuri.org/IAdminService/ResumeSearchResponse")]
        System.Threading.Tasks.Task ResumeSearchAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/StopSearch", ReplyAction="http://tempuri.org/IAdminService/StopSearchResponse")]
        void StopSearch(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/StopSearch", ReplyAction="http://tempuri.org/IAdminService/StopSearchResponse")]
        System.Threading.Tasks.Task StopSearchAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/StartProcess", ReplyAction="http://tempuri.org/IAdminService/StartProcessResponse")]
        void StartProcess(string login, string password, string targetLogin, string path, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/StartProcess", ReplyAction="http://tempuri.org/IAdminService/StartProcessResponse")]
        System.Threading.Tasks.Task StartProcessAsync(string login, string password, string targetLogin, string path, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LockStation", ReplyAction="http://tempuri.org/IAdminService/LockStationResponse")]
        void LockStation(string login, string password, string targetLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LockStation", ReplyAction="http://tempuri.org/IAdminService/LockStationResponse")]
        System.Threading.Tasks.Task LockStationAsync(string login, string password, string targetLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SuspendStation", ReplyAction="http://tempuri.org/IAdminService/SuspendStationResponse")]
        void SuspendStation(string login, string password, string targetLogin, bool toHibernate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SuspendStation", ReplyAction="http://tempuri.org/IAdminService/SuspendStationResponse")]
        System.Threading.Tasks.Task SuspendStationAsync(string login, string password, string targetLogin, bool toHibernate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetLogicalDrives", ReplyAction="http://tempuri.org/IAdminService/GetLogicalDrivesResponse")]
        string[] GetLogicalDrives(string login, string password, string targetLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetLogicalDrives", ReplyAction="http://tempuri.org/IAdminService/GetLogicalDrivesResponse")]
        System.Threading.Tasks.Task<string[]> GetLogicalDrivesAsync(string login, string password, string targetLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetFolders", ReplyAction="http://tempuri.org/IAdminService/GetFoldersResponse")]
        AdministratorClientApp.ServiceReference.FolderContainer[] GetFolders(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetFolders", ReplyAction="http://tempuri.org/IAdminService/GetFoldersResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.FolderContainer[]> GetFoldersAsync(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetFiles", ReplyAction="http://tempuri.org/IAdminService/GetFilesResponse")]
        AdministratorClientApp.ServiceReference.FileContainer[] GetFiles(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetFiles", ReplyAction="http://tempuri.org/IAdminService/GetFilesResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.FileContainer[]> GetFilesAsync(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteObject", ReplyAction="http://tempuri.org/IAdminService/DeleteObjectResponse")]
        void DeleteObject(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteObject", ReplyAction="http://tempuri.org/IAdminService/DeleteObjectResponse")]
        System.Threading.Tasks.Task DeleteObjectAsync(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RenameObject", ReplyAction="http://tempuri.org/IAdminService/RenameObjectResponse")]
        void RenameObject(string login, string password, string targetLogin, string path, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RenameObject", ReplyAction="http://tempuri.org/IAdminService/RenameObjectResponse")]
        System.Threading.Tasks.Task RenameObjectAsync(string login, string password, string targetLogin, string path, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/CopyObject", ReplyAction="http://tempuri.org/IAdminService/CopyObjectResponse")]
        void CopyObject(string login, string password, string targetLogin, string fromPath, string toPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/CopyObject", ReplyAction="http://tempuri.org/IAdminService/CopyObjectResponse")]
        System.Threading.Tasks.Task CopyObjectAsync(string login, string password, string targetLogin, string fromPath, string toPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetRegistryKeys", ReplyAction="http://tempuri.org/IAdminService/GetRegistryKeysResponse")]
        AdministratorClientApp.ServiceReference.RegistryKeyContainer[] GetRegistryKeys(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetRegistryKeys", ReplyAction="http://tempuri.org/IAdminService/GetRegistryKeysResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.RegistryKeyContainer[]> GetRegistryKeysAsync(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetRegistryKeyValues", ReplyAction="http://tempuri.org/IAdminService/GetRegistryKeyValuesResponse")]
        AdministratorClientApp.ServiceReference.ValueContainer[] GetRegistryKeyValues(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetRegistryKeyValues", ReplyAction="http://tempuri.org/IAdminService/GetRegistryKeyValuesResponse")]
        System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.ValueContainer[]> GetRegistryKeyValuesAsync(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RenameRegistryKeyValue", ReplyAction="http://tempuri.org/IAdminService/RenameRegistryKeyValueResponse")]
        void RenameRegistryKeyValue(string login, string password, string targetLogin, string path, string name, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RenameRegistryKeyValue", ReplyAction="http://tempuri.org/IAdminService/RenameRegistryKeyValueResponse")]
        System.Threading.Tasks.Task RenameRegistryKeyValueAsync(string login, string password, string targetLogin, string path, string name, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RenameRegistryKey", ReplyAction="http://tempuri.org/IAdminService/RenameRegistryKeyResponse")]
        void RenameRegistryKey(string login, string password, string targetLogin, string path, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RenameRegistryKey", ReplyAction="http://tempuri.org/IAdminService/RenameRegistryKeyResponse")]
        System.Threading.Tasks.Task RenameRegistryKeyAsync(string login, string password, string targetLogin, string path, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteRegistryKeyValue", ReplyAction="http://tempuri.org/IAdminService/DeleteRegistryKeyValueResponse")]
        void DeleteRegistryKeyValue(string login, string password, string targetLogin, string path, string valueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteRegistryKeyValue", ReplyAction="http://tempuri.org/IAdminService/DeleteRegistryKeyValueResponse")]
        System.Threading.Tasks.Task DeleteRegistryKeyValueAsync(string login, string password, string targetLogin, string path, string valueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteRegistryKey", ReplyAction="http://tempuri.org/IAdminService/DeleteRegistryKeyResponse")]
        void DeleteRegistryKey(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteRegistryKey", ReplyAction="http://tempuri.org/IAdminService/DeleteRegistryKeyResponse")]
        System.Threading.Tasks.Task DeleteRegistryKeyAsync(string login, string password, string targetLogin, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SendCommand", ReplyAction="http://tempuri.org/IAdminService/SendCommandResponse")]
        string[] SendCommand(string login, string password, string targetLogin, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SendCommand", ReplyAction="http://tempuri.org/IAdminService/SendCommandResponse")]
        System.Threading.Tasks.Task<string[]> SendCommandAsync(string login, string password, string targetLogin, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetScreenshot", ReplyAction="http://tempuri.org/IAdminService/GetScreenshotResponse")]
        byte[] GetScreenshot(string login, string password, string targetLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetScreenshot", ReplyAction="http://tempuri.org/IAdminService/GetScreenshotResponse")]
        System.Threading.Tasks.Task<byte[]> GetScreenshotAsync(string login, string password, string targetLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SendMessageBoxBroadcast", ReplyAction="http://tempuri.org/IAdminService/SendMessageBoxBroadcastResponse")]
        void SendMessageBoxBroadcast(string login, string password, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SendMessageBoxBroadcast", ReplyAction="http://tempuri.org/IAdminService/SendMessageBoxBroadcastResponse")]
        System.Threading.Tasks.Task SendMessageBoxBroadcastAsync(string login, string password, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/StartProcessBroadcast", ReplyAction="http://tempuri.org/IAdminService/StartProcessBroadcastResponse")]
        void StartProcessBroadcast(string login, string password, string path, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/StartProcessBroadcast", ReplyAction="http://tempuri.org/IAdminService/StartProcessBroadcastResponse")]
        System.Threading.Tasks.Task StartProcessBroadcastAsync(string login, string password, string path, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LockStationBroadcast", ReplyAction="http://tempuri.org/IAdminService/LockStationBroadcastResponse")]
        void LockStationBroadcast(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LockStationBroadcast", ReplyAction="http://tempuri.org/IAdminService/LockStationBroadcastResponse")]
        System.Threading.Tasks.Task LockStationBroadcastAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SuspendStationBroadcast", ReplyAction="http://tempuri.org/IAdminService/SuspendStationBroadcastResponse")]
        void SuspendStationBroadcast(string login, string password, bool toHibernate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SuspendStationBroadcast", ReplyAction="http://tempuri.org/IAdminService/SuspendStationBroadcastResponse")]
        System.Threading.Tasks.Task SuspendStationBroadcastAsync(string login, string password, bool toHibernate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateData", ReplyAction="http://tempuri.org/IAdminService/UpdateDataResponse")]
        void UpdateData(AdministratorClientApp.ServiceReference.User[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetFile", ReplyAction="http://tempuri.org/IAdminService/GetFileResponse")]
        void GetFile(AdministratorClientApp.ServiceReference.FileContainer file);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : AdministratorClientApp.ServiceReference.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.DuplexClientBase<AdministratorClientApp.ServiceReference.IAdminService>, AdministratorClientApp.ServiceReference.IAdminService {
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RemoveAdmin(string login, string password) {
            base.Channel.RemoveAdmin(login, password);
        }
        
        public System.Threading.Tasks.Task RemoveAdminAsync(string login, string password) {
            return base.Channel.RemoveAdminAsync(login, password);
        }
        
        public AdministratorClientApp.ServiceReference.Administrator LogInAdmin(string login, string password) {
            return base.Channel.LogInAdmin(login, password);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.Administrator> LogInAdminAsync(string login, string password) {
            return base.Channel.LogInAdminAsync(login, password);
        }
        
        public AdministratorClientApp.ServiceReference.Administrator RegisterAdmin(string login, string password) {
            return base.Channel.RegisterAdmin(login, password);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.Administrator> RegisterAdminAsync(string login, string password) {
            return base.Channel.RegisterAdminAsync(login, password);
        }
        
        public void LogOutAdmin(string login, string password) {
            base.Channel.LogOutAdmin(login, password);
        }
        
        public System.Threading.Tasks.Task LogOutAdminAsync(string login, string password) {
            return base.Channel.LogOutAdminAsync(login, password);
        }
        
        public AdministratorClientApp.ServiceReference.User[] GetUsers(AdministratorClientApp.ServiceReference.Administrator admin) {
            return base.Channel.GetUsers(admin);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.User[]> GetUsersAsync(AdministratorClientApp.ServiceReference.Administrator admin) {
            return base.Channel.GetUsersAsync(admin);
        }
        
        public void SendMessageBox(string login, string password, string targetLogin, string msg) {
            base.Channel.SendMessageBox(login, password, targetLogin, msg);
        }
        
        public System.Threading.Tasks.Task SendMessageBoxAsync(string login, string password, string targetLogin, string msg) {
            return base.Channel.SendMessageBoxAsync(login, password, targetLogin, msg);
        }
        
        public AdministratorClientApp.ServiceReference.ProcessContainer[] GetProcesses(string login, string password, string targetLogin, string filter) {
            return base.Channel.GetProcesses(login, password, targetLogin, filter);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.ProcessContainer[]> GetProcessesAsync(string login, string password, string targetLogin, string filter) {
            return base.Channel.GetProcessesAsync(login, password, targetLogin, filter);
        }
        
        public void TerminateProcesses(string login, string password, string targetLogin, int[] pids) {
            base.Channel.TerminateProcesses(login, password, targetLogin, pids);
        }
        
        public System.Threading.Tasks.Task TerminateProcessesAsync(string login, string password, string targetLogin, int[] pids) {
            return base.Channel.TerminateProcessesAsync(login, password, targetLogin, pids);
        }
        
        public void SuspendProcesses(string login, string password, string targetLogin, int[] pids) {
            base.Channel.SuspendProcesses(login, password, targetLogin, pids);
        }
        
        public System.Threading.Tasks.Task SuspendProcessesAsync(string login, string password, string targetLogin, int[] pids) {
            return base.Channel.SuspendProcessesAsync(login, password, targetLogin, pids);
        }
        
        public void ResumeProcesses(string login, string password, string targetLogin, int[] pids) {
            base.Channel.ResumeProcesses(login, password, targetLogin, pids);
        }
        
        public System.Threading.Tasks.Task ResumeProcessesAsync(string login, string password, string targetLogin, int[] pids) {
            return base.Channel.ResumeProcessesAsync(login, password, targetLogin, pids);
        }
        
        public void BeginSearchFiles(string login, string password, string targetLogin, string path, string mask) {
            base.Channel.BeginSearchFiles(login, password, targetLogin, path, mask);
        }
        
        public System.Threading.Tasks.Task BeginSearchFilesAsync(string login, string password, string targetLogin, string path, string mask) {
            return base.Channel.BeginSearchFilesAsync(login, password, targetLogin, path, mask);
        }
        
        public AdministratorClientApp.ServiceReference.ResourcesSearchingStatus GetSearchingStatus(string login, string password) {
            return base.Channel.GetSearchingStatus(login, password);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.ResourcesSearchingStatus> GetSearchingStatusAsync(string login, string password) {
            return base.Channel.GetSearchingStatusAsync(login, password);
        }
        
        public void PauseSearch(string login, string password) {
            base.Channel.PauseSearch(login, password);
        }
        
        public System.Threading.Tasks.Task PauseSearchAsync(string login, string password) {
            return base.Channel.PauseSearchAsync(login, password);
        }
        
        public void ResumeSearch(string login, string password) {
            base.Channel.ResumeSearch(login, password);
        }
        
        public System.Threading.Tasks.Task ResumeSearchAsync(string login, string password) {
            return base.Channel.ResumeSearchAsync(login, password);
        }
        
        public void StopSearch(string login, string password) {
            base.Channel.StopSearch(login, password);
        }
        
        public System.Threading.Tasks.Task StopSearchAsync(string login, string password) {
            return base.Channel.StopSearchAsync(login, password);
        }
        
        public void StartProcess(string login, string password, string targetLogin, string path, string args) {
            base.Channel.StartProcess(login, password, targetLogin, path, args);
        }
        
        public System.Threading.Tasks.Task StartProcessAsync(string login, string password, string targetLogin, string path, string args) {
            return base.Channel.StartProcessAsync(login, password, targetLogin, path, args);
        }
        
        public void LockStation(string login, string password, string targetLogin) {
            base.Channel.LockStation(login, password, targetLogin);
        }
        
        public System.Threading.Tasks.Task LockStationAsync(string login, string password, string targetLogin) {
            return base.Channel.LockStationAsync(login, password, targetLogin);
        }
        
        public void SuspendStation(string login, string password, string targetLogin, bool toHibernate) {
            base.Channel.SuspendStation(login, password, targetLogin, toHibernate);
        }
        
        public System.Threading.Tasks.Task SuspendStationAsync(string login, string password, string targetLogin, bool toHibernate) {
            return base.Channel.SuspendStationAsync(login, password, targetLogin, toHibernate);
        }
        
        public string[] GetLogicalDrives(string login, string password, string targetLogin) {
            return base.Channel.GetLogicalDrives(login, password, targetLogin);
        }
        
        public System.Threading.Tasks.Task<string[]> GetLogicalDrivesAsync(string login, string password, string targetLogin) {
            return base.Channel.GetLogicalDrivesAsync(login, password, targetLogin);
        }
        
        public AdministratorClientApp.ServiceReference.FolderContainer[] GetFolders(string login, string password, string targetLogin, string path) {
            return base.Channel.GetFolders(login, password, targetLogin, path);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.FolderContainer[]> GetFoldersAsync(string login, string password, string targetLogin, string path) {
            return base.Channel.GetFoldersAsync(login, password, targetLogin, path);
        }
        
        public AdministratorClientApp.ServiceReference.FileContainer[] GetFiles(string login, string password, string targetLogin, string path) {
            return base.Channel.GetFiles(login, password, targetLogin, path);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.FileContainer[]> GetFilesAsync(string login, string password, string targetLogin, string path) {
            return base.Channel.GetFilesAsync(login, password, targetLogin, path);
        }
        
        public void DeleteObject(string login, string password, string targetLogin, string path) {
            base.Channel.DeleteObject(login, password, targetLogin, path);
        }
        
        public System.Threading.Tasks.Task DeleteObjectAsync(string login, string password, string targetLogin, string path) {
            return base.Channel.DeleteObjectAsync(login, password, targetLogin, path);
        }
        
        public void RenameObject(string login, string password, string targetLogin, string path, string newName) {
            base.Channel.RenameObject(login, password, targetLogin, path, newName);
        }
        
        public System.Threading.Tasks.Task RenameObjectAsync(string login, string password, string targetLogin, string path, string newName) {
            return base.Channel.RenameObjectAsync(login, password, targetLogin, path, newName);
        }
        
        public void CopyObject(string login, string password, string targetLogin, string fromPath, string toPath) {
            base.Channel.CopyObject(login, password, targetLogin, fromPath, toPath);
        }
        
        public System.Threading.Tasks.Task CopyObjectAsync(string login, string password, string targetLogin, string fromPath, string toPath) {
            return base.Channel.CopyObjectAsync(login, password, targetLogin, fromPath, toPath);
        }
        
        public AdministratorClientApp.ServiceReference.RegistryKeyContainer[] GetRegistryKeys(string login, string password, string targetLogin, string path) {
            return base.Channel.GetRegistryKeys(login, password, targetLogin, path);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.RegistryKeyContainer[]> GetRegistryKeysAsync(string login, string password, string targetLogin, string path) {
            return base.Channel.GetRegistryKeysAsync(login, password, targetLogin, path);
        }
        
        public AdministratorClientApp.ServiceReference.ValueContainer[] GetRegistryKeyValues(string login, string password, string targetLogin, string path) {
            return base.Channel.GetRegistryKeyValues(login, password, targetLogin, path);
        }
        
        public System.Threading.Tasks.Task<AdministratorClientApp.ServiceReference.ValueContainer[]> GetRegistryKeyValuesAsync(string login, string password, string targetLogin, string path) {
            return base.Channel.GetRegistryKeyValuesAsync(login, password, targetLogin, path);
        }
        
        public void RenameRegistryKeyValue(string login, string password, string targetLogin, string path, string name, string newName) {
            base.Channel.RenameRegistryKeyValue(login, password, targetLogin, path, name, newName);
        }
        
        public System.Threading.Tasks.Task RenameRegistryKeyValueAsync(string login, string password, string targetLogin, string path, string name, string newName) {
            return base.Channel.RenameRegistryKeyValueAsync(login, password, targetLogin, path, name, newName);
        }
        
        public void RenameRegistryKey(string login, string password, string targetLogin, string path, string newName) {
            base.Channel.RenameRegistryKey(login, password, targetLogin, path, newName);
        }
        
        public System.Threading.Tasks.Task RenameRegistryKeyAsync(string login, string password, string targetLogin, string path, string newName) {
            return base.Channel.RenameRegistryKeyAsync(login, password, targetLogin, path, newName);
        }
        
        public void DeleteRegistryKeyValue(string login, string password, string targetLogin, string path, string valueName) {
            base.Channel.DeleteRegistryKeyValue(login, password, targetLogin, path, valueName);
        }
        
        public System.Threading.Tasks.Task DeleteRegistryKeyValueAsync(string login, string password, string targetLogin, string path, string valueName) {
            return base.Channel.DeleteRegistryKeyValueAsync(login, password, targetLogin, path, valueName);
        }
        
        public void DeleteRegistryKey(string login, string password, string targetLogin, string path) {
            base.Channel.DeleteRegistryKey(login, password, targetLogin, path);
        }
        
        public System.Threading.Tasks.Task DeleteRegistryKeyAsync(string login, string password, string targetLogin, string path) {
            return base.Channel.DeleteRegistryKeyAsync(login, password, targetLogin, path);
        }
        
        public string[] SendCommand(string login, string password, string targetLogin, string command) {
            return base.Channel.SendCommand(login, password, targetLogin, command);
        }
        
        public System.Threading.Tasks.Task<string[]> SendCommandAsync(string login, string password, string targetLogin, string command) {
            return base.Channel.SendCommandAsync(login, password, targetLogin, command);
        }
        
        public byte[] GetScreenshot(string login, string password, string targetLogin) {
            return base.Channel.GetScreenshot(login, password, targetLogin);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetScreenshotAsync(string login, string password, string targetLogin) {
            return base.Channel.GetScreenshotAsync(login, password, targetLogin);
        }
        
        public void SendMessageBoxBroadcast(string login, string password, string msg) {
            base.Channel.SendMessageBoxBroadcast(login, password, msg);
        }
        
        public System.Threading.Tasks.Task SendMessageBoxBroadcastAsync(string login, string password, string msg) {
            return base.Channel.SendMessageBoxBroadcastAsync(login, password, msg);
        }
        
        public void StartProcessBroadcast(string login, string password, string path, string args) {
            base.Channel.StartProcessBroadcast(login, password, path, args);
        }
        
        public System.Threading.Tasks.Task StartProcessBroadcastAsync(string login, string password, string path, string args) {
            return base.Channel.StartProcessBroadcastAsync(login, password, path, args);
        }
        
        public void LockStationBroadcast(string login, string password) {
            base.Channel.LockStationBroadcast(login, password);
        }
        
        public System.Threading.Tasks.Task LockStationBroadcastAsync(string login, string password) {
            return base.Channel.LockStationBroadcastAsync(login, password);
        }
        
        public void SuspendStationBroadcast(string login, string password, bool toHibernate) {
            base.Channel.SuspendStationBroadcast(login, password, toHibernate);
        }
        
        public System.Threading.Tasks.Task SuspendStationBroadcastAsync(string login, string password, bool toHibernate) {
            return base.Channel.SuspendStationBroadcastAsync(login, password, toHibernate);
        }
    }
}

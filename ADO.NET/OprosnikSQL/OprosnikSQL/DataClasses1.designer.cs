#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OprosnikSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Oprosnik")]
	public partial class DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertanswers(answers instance);
    partial void Updateanswers(answers instance);
    partial void Deleteanswers(answers instance);
    partial void Insertquestions(questions instance);
    partial void Updatequestions(questions instance);
    partial void Deletequestions(questions instance);
    #endregion
		
		public DataContext() : 
				base(global::OprosnikSQL.Properties.Settings.Default.OprosnikConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<answers> answers
		{
			get
			{
				return this.GetTable<answers>();
			}
		}
		
		public System.Data.Linq.Table<questions> questions
		{
			get
			{
				return this.GetTable<questions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answers")]
	public partial class answers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _answer_id;
		
		private int _question_id;
		
		private string _answer_text;
		
		private int _points;
		
		private System.Nullable<bool> _is_correct;
		
		private EntityRef<questions> _questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onanswer_idChanging(int value);
    partial void Onanswer_idChanged();
    partial void Onquestion_idChanging(int value);
    partial void Onquestion_idChanged();
    partial void Onanswer_textChanging(string value);
    partial void Onanswer_textChanged();
    partial void OnpointsChanging(int value);
    partial void OnpointsChanged();
    partial void Onis_correctChanging(System.Nullable<bool> value);
    partial void Onis_correctChanged();
    #endregion
		
		public answers()
		{
			this._questions = default(EntityRef<questions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int answer_id
		{
			get
			{
				return this._answer_id;
			}
			set
			{
				if ((this._answer_id != value))
				{
					this.Onanswer_idChanging(value);
					this.SendPropertyChanging();
					this._answer_id = value;
					this.SendPropertyChanged("answer_id");
					this.Onanswer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int NOT NULL")]
		public int question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					if (this._questions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer_text", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string answer_text
		{
			get
			{
				return this._answer_text;
			}
			set
			{
				if ((this._answer_text != value))
				{
					this.Onanswer_textChanging(value);
					this.SendPropertyChanging();
					this._answer_text = value;
					this.SendPropertyChanged("answer_text");
					this.Onanswer_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_points", DbType="Int NOT NULL")]
		public int points
		{
			get
			{
				return this._points;
			}
			set
			{
				if ((this._points != value))
				{
					this.OnpointsChanging(value);
					this.SendPropertyChanging();
					this._points = value;
					this.SendPropertyChanged("points");
					this.OnpointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_correct", DbType="Bit")]
		public System.Nullable<bool> is_correct
		{
			get
			{
				return this._is_correct;
			}
			set
			{
				if ((this._is_correct != value))
				{
					this.Onis_correctChanging(value);
					this.SendPropertyChanging();
					this._is_correct = value;
					this.SendPropertyChanged("is_correct");
					this.Onis_correctChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="questions_answers", Storage="_questions", ThisKey="question_id", OtherKey="question_id", IsForeignKey=true)]
		public questions questions
		{
			get
			{
				return this._questions.Entity;
			}
			set
			{
				questions previousValue = this._questions.Entity;
				if (((previousValue != value) 
							|| (this._questions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._questions.Entity = null;
						previousValue.answers.Remove(this);
					}
					this._questions.Entity = value;
					if ((value != null))
					{
						value.answers.Add(this);
						this._question_id = value.question_id;
					}
					else
					{
						this._question_id = default(int);
					}
					this.SendPropertyChanged("questions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.questions")]
	public partial class questions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _question_id;
		
		private string _question_text;
		
		private EntitySet<answers> _answers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onquestion_idChanging(int value);
    partial void Onquestion_idChanged();
    partial void Onquestion_textChanging(string value);
    partial void Onquestion_textChanged();
    #endregion
		
		public questions()
		{
			this._answers = new EntitySet<answers>(new Action<answers>(this.attach_answers), new Action<answers>(this.detach_answers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_text", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string question_text
		{
			get
			{
				return this._question_text;
			}
			set
			{
				if ((this._question_text != value))
				{
					this.Onquestion_textChanging(value);
					this.SendPropertyChanging();
					this._question_text = value;
					this.SendPropertyChanged("question_text");
					this.Onquestion_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="questions_answers", Storage="_answers", ThisKey="question_id", OtherKey="question_id")]
		public EntitySet<answers> answers
		{
			get
			{
				return this._answers;
			}
			set
			{
				this._answers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answers(answers entity)
		{
			this.SendPropertyChanging();
			entity.questions = this;
		}
		
		private void detach_answers(answers entity)
		{
			this.SendPropertyChanging();
			entity.questions = null;
		}
	}
}
#pragma warning restore 1591

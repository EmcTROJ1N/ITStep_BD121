//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.Server {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ChatService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatClient.Server.User[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string[]>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object CallbackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string[]> ChatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ChatsListViewSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Callback {
            get {
                return this.CallbackField;
            }
            set {
                if ((object.ReferenceEquals(this.CallbackField, value) != true)) {
                    this.CallbackField = value;
                    this.RaisePropertyChanged("Callback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string[]> Chats {
            get {
                return this.ChatsField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatsField, value) != true)) {
                    this.ChatsField = value;
                    this.RaisePropertyChanged("Chats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ChatsListViewSource {
            get {
                return this.ChatsListViewSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatsListViewSourceField, value) != true)) {
                    this.ChatsListViewSourceField = value;
                    this.RaisePropertyChanged("ChatsListViewSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IService", CallbackContract=typeof(ChatClient.Server.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsers", ReplyAction="http://tempuri.org/IService/GetUsersResponse")]
        ChatClient.Server.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsers", ReplyAction="http://tempuri.org/IService/GetUsersResponse")]
        System.Threading.Tasks.Task<ChatClient.Server.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddClient", ReplyAction="http://tempuri.org/IService/AddClientResponse")]
        bool AddClient(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddClient", ReplyAction="http://tempuri.org/IService/AddClientResponse")]
        System.Threading.Tasks.Task<bool> AddClientAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveClient", ReplyAction="http://tempuri.org/IService/RemoveClientResponse")]
        bool RemoveClient(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveClient", ReplyAction="http://tempuri.org/IService/RemoveClientResponse")]
        System.Threading.Tasks.Task<bool> RemoveClientAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseConnection", ReplyAction="http://tempuri.org/IService/CloseConnectionResponse")]
        bool CloseConnection(string loginFrom, string loginTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseConnection", ReplyAction="http://tempuri.org/IService/CloseConnectionResponse")]
        System.Threading.Tasks.Task<bool> CloseConnectionAsync(string loginFrom, string loginTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenConnection", ReplyAction="http://tempuri.org/IService/OpenConnectionResponse")]
        bool OpenConnection(string loginFrom, string loginTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenConnection", ReplyAction="http://tempuri.org/IService/OpenConnectionResponse")]
        System.Threading.Tasks.Task<bool> OpenConnectionAsync(string loginFrom, string loginTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendTextMessage", ReplyAction="http://tempuri.org/IService/SendTextMessageResponse")]
        bool SendTextMessage(string loginFrom, string loginTo, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendTextMessage", ReplyAction="http://tempuri.org/IService/SendTextMessageResponse")]
        System.Threading.Tasks.Task<bool> SendTextMessageAsync(string loginFrom, string loginTo, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUI", ReplyAction="http://tempuri.org/IService/UpdateUIResponse")]
        void UpdateUI(ChatClient.Server.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ChatClient.Server.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<ChatClient.Server.IService>, ChatClient.Server.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ChatClient.Server.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<ChatClient.Server.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public bool AddClient(string login) {
            return base.Channel.AddClient(login);
        }
        
        public System.Threading.Tasks.Task<bool> AddClientAsync(string login) {
            return base.Channel.AddClientAsync(login);
        }
        
        public bool RemoveClient(string login) {
            return base.Channel.RemoveClient(login);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveClientAsync(string login) {
            return base.Channel.RemoveClientAsync(login);
        }
        
        public bool CloseConnection(string loginFrom, string loginTo) {
            return base.Channel.CloseConnection(loginFrom, loginTo);
        }
        
        public System.Threading.Tasks.Task<bool> CloseConnectionAsync(string loginFrom, string loginTo) {
            return base.Channel.CloseConnectionAsync(loginFrom, loginTo);
        }
        
        public bool OpenConnection(string loginFrom, string loginTo) {
            return base.Channel.OpenConnection(loginFrom, loginTo);
        }
        
        public System.Threading.Tasks.Task<bool> OpenConnectionAsync(string loginFrom, string loginTo) {
            return base.Channel.OpenConnectionAsync(loginFrom, loginTo);
        }
        
        public bool SendTextMessage(string loginFrom, string loginTo, string message) {
            return base.Channel.SendTextMessage(loginFrom, loginTo, message);
        }
        
        public System.Threading.Tasks.Task<bool> SendTextMessageAsync(string loginFrom, string loginTo, string message) {
            return base.Channel.SendTextMessageAsync(loginFrom, loginTo, message);
        }
    }
}
